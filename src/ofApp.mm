#include "ofApp.h"
#include <AVFoundation/AVFoundation.h>


float sines[514]={0,0.012268,0.024536,0.036804,0.049042,0.06131,0.073547,0.085785,0.097992,0.1102,0.12241,0.13455,0.1467,0.15884,0.17093,0.18301,0.19507,0.20709,0.21909,0.23105,0.24295,0.25485,0.26669,0.2785,0.29025,0.30197,0.31366,0.32529,0.33685,0.34839,0.35986,0.37128,0.38266,0.39395,0.40521,0.41641,0.42752,0.4386,0.44958,0.46051,0.47137,0.48215,0.49286,0.50351,0.51407,0.52457,0.53497,0.54529,0.55554,0.5657,0.57578,0.58575,0.59567,0.60547,0.6152,0.62482,0.63437,0.6438,0.65314,0.66238,0.67151,0.68057,0.68951,0.69833,0.70706,0.7157,0.72421,0.7326,0.74091,0.74908,0.75717,0.76514,0.77298,0.7807,0.7883,0.79581,0.80316,0.81042,0.81754,0.82455,0.83142,0.8382,0.84482,0.85132,0.8577,0.86392,0.87006,0.87604,0.88187,0.8876,0.89319,0.89862,0.90396,0.90912,0.91415,0.91907,0.92383,0.92847,0.93295,0.93729,0.9415,0.94556,0.94949,0.95325,0.95691,0.96039,0.96375,0.96692,0.97,0.9729,0.97565,0.97827,0.98074,0.98306,0.98523,0.98724,0.98914,0.99084,0.99243,0.99387,0.99515,0.99628,0.99725,0.99808,0.99875,0.99927,0.99966,0.99988,0.99997,0.99988,0.99966,0.99927,0.99875,0.99808,0.99725,0.99628,0.99515,0.99387,0.99243,0.99084,0.98914,0.98724,0.98523,0.98306,0.98074,0.97827,0.97565,0.9729,0.97,0.96692,0.96375,0.96039,0.95691,0.95325,0.94949,0.94556,0.9415,0.93729,0.93295,0.92847,0.92383,0.91907,0.91415,0.90912,0.90396,0.89862,0.89319,0.8876,0.88187,0.87604,0.87006,0.86392,0.8577,0.85132,0.84482,0.8382,0.83142,0.82455,0.81754,0.81042,0.80316,0.79581,0.7883,0.7807,0.77298,0.76514,0.75717,0.74908,0.74091,0.7326,0.72421,0.7157,0.70706,0.69833,0.68951,0.68057,0.67151,0.66238,0.65314,0.6438,0.63437,0.62482,0.6152,0.60547,0.59567,0.58575,0.57578,0.5657,0.55554,0.54529,0.53497,0.52457,0.51407,0.50351,0.49286,0.48215,0.47137,0.46051,0.44958,0.4386,0.42752,0.41641,0.40521,0.39395,0.38266,0.37128,0.35986,0.34839,0.33685,0.32529,0.31366,0.30197,0.29025,0.2785,0.26669,0.25485,0.24295,0.23105,0.21909,0.20709,0.19507,0.18301,0.17093,0.15884,0.1467,0.13455,0.12241,0.1102,0.097992,0.085785,0.073547,0.06131,0.049042,0.036804,0.024536,0.012268,0,-0.012268,-0.024536,-0.036804,-0.049042,-0.06131,-0.073547,-0.085785,-0.097992,-0.1102,-0.12241,-0.13455,-0.1467,-0.15884,-0.17093,-0.18301,-0.19507,-0.20709,-0.21909,-0.23105,-0.24295,-0.25485,-0.26669,-0.2785,-0.29025,-0.30197,-0.31366,-0.32529,-0.33685,-0.34839,-0.35986,-0.37128,-0.38266,-0.39395,-0.40521,-0.41641,-0.42752,-0.4386,-0.44958,-0.46051,-0.47137,-0.48215,-0.49286,-0.50351,-0.51407,-0.52457,-0.53497,-0.54529,-0.55554,-0.5657,-0.57578,-0.58575,-0.59567,-0.60547,-0.6152,-0.62482,-0.63437,-0.6438,-0.65314,-0.66238,-0.67151,-0.68057,-0.68951,-0.69833,-0.70706,-0.7157,-0.72421,-0.7326,-0.74091,-0.74908,-0.75717,-0.76514,-0.77298,-0.7807,-0.7883,-0.79581,-0.80316,-0.81042,-0.81754,-0.82455,-0.83142,-0.8382,-0.84482,-0.85132,-0.8577,-0.86392,-0.87006,-0.87604,-0.88187,-0.8876,-0.89319,-0.89862,-0.90396,-0.90912,-0.91415,-0.91907,-0.92383,-0.92847,-0.93295,-0.93729,-0.9415,-0.94556,-0.94949,-0.95325,-0.95691,-0.96039,-0.96375,-0.96692,-0.97,-0.9729,-0.97565,-0.97827,-0.98074,-0.98306,-0.98523,-0.98724,-0.98914,-0.99084,-0.99243,-0.99387,-0.99515,-0.99628,-0.99725,-0.99808,-0.99875,-0.99927,-0.99966,-0.99988,-0.99997,-0.99988,-0.99966,-0.99927,-0.99875,-0.99808,-0.99725,-0.99628,-0.99515,-0.99387,-0.99243,-0.99084,-0.98914,-0.98724,-0.98523,-0.98306,-0.98074,-0.97827,-0.97565,-0.9729,-0.97,-0.96692,-0.96375,-0.96039,-0.95691,-0.95325,-0.94949,-0.94556,-0.9415,-0.93729,-0.93295,-0.92847,-0.92383,-0.91907,-0.91415,-0.90912,-0.90396,-0.89862,-0.89319,-0.8876,-0.88187,-0.87604,-0.87006,-0.86392,-0.8577,-0.85132,-0.84482,-0.8382,-0.83142,-0.82455,-0.81754,-0.81042,-0.80316,-0.79581,-0.7883,-0.7807,-0.77298,-0.76514,-0.75717,-0.74908,-0.74091,-0.7326,-0.72421,-0.7157,-0.70706,-0.69833,-0.68951,-0.68057,-0.67151,-0.66238,-0.65314,-0.6438,-0.63437,-0.62482,-0.6152,-0.60547,-0.59567,-0.58575,-0.57578,-0.5657,-0.55554,-0.54529,-0.53497,-0.52457,-0.51407,-0.50351,-0.49286,-0.48215,-0.47137,-0.46051,-0.44958,-0.4386,-0.42752,-0.41641,-0.40521,-0.39395,-0.38266,-0.37128,-0.35986,-0.34839,-0.33685,-0.32529,-0.31366,-0.30197,-0.29025,-0.2785,-0.26669,-0.25485,-0.24295,-0.23105,-0.21909,-0.20709,-0.19507,-0.18301,-0.17093,-0.15884,-0.1467,-0.13455,-0.12241,-0.1102,-0.097992,-0.085785,-0.073547,-0.06131,-0.049042,-0.036804,-0.024536,-0.012268,0,0.012268};




//--------------------------------------------------------------
void ofApp::setup(){
    
    //    [[AVAudioSession sharedInstance] setDelegate:self];
    //    NSError *error = nil;
    [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayback error:nil];
    [[AVAudioSession sharedInstance] setActive:YES error:nil];
    //    [[UIApplication sharedApplication] beginReceivingRemoteControlEvents];

    
    
    ofSetFrameRate(60);
    ofBackground(10);
    
    camWidth = 320;
    camHeight = 240;
    
    grabber.setDesiredFrameRate(30);
    grabber.setPixelFormat( OF_PIXELS_RGB );
    grabber.initGrabber( camWidth, camHeight );
    
    for (int i=0; i<514; i++) {
        sineBuffer[i] = sines[i];
    }
    
    
    bPlaying = false;
    line = 8;
    
    camImage.allocate( camWidth, camHeight, OF_IMAGE_COLOR );
    camPixel.allocate( camWidth, camHeight, OF_IMAGE_COLOR );
    
    screenMiddleX = ofGetWidth()*0.5;
    
    threshold = 0.9;
    maxHertz = 8000;
    minHertz = 50;
    
    ofSoundStreamSetup( 2, 0, this, SAMPLE_RATE, INITIAL_BUFFER_SIZE, 4 );
    ofSoundStreamStart();

}


//--------------------------------------------------------------
void ofApp::update(){
    
    camPixel.clear();
    grabber.update();
//    camPixel = grabber.getPixelsRef();
    camPixel = grabber.getPixels();
    
//    camImage.setFromPixels( camPixel );
    camImage.setFromPixels( camPixel.getData(), camWidth, camHeight, OF_IMAGE_COLOR );
    
    if ( bPlaying ) {
        for(int n = 0;n<BIT;n++){
            amp[n] = ( amp[n] * line + getAmp( grabber.getWidth() * 0.5, n ) ) / ( line + 1 );
            hertzScale[n] = int( n * 2 );
        }
    }
    
    
}



//--------------------------------------------------------------
void ofApp::draw(){
    
//    camImage.draw( 0, 0, camWidth, camHeight );
    grabber.draw( 0, 0, ofGetWidth(), ofGetHeight() );
    
    ofPushStyle();
    ofSetColor(0, 255, 0, 230);
    
    if ( bPlaying ) {
        for(int n=0; n<BIT; n++){
            float _yRatio = ofMap( n, 0, BIT-1, 0, ofGetHeight() );
            float _sizeRatio = 100.0;
            ofDrawRectangle( screenMiddleX, _yRatio, amp[n] * _sizeRatio, 1 );
            ofDrawRectangle( screenMiddleX, _yRatio, -amp[n] * _sizeRatio, 1 );
        }
    }
    
    ofLine( screenMiddleX, 0, screenMiddleX, ofGetHeight() );
    ofPopStyle();
    
    
}

//--------------------------------------------------------------
void ofApp::exit(){

    ofSoundStreamStop();

}

//--------------------------------------------------------------
float ofApp::getPixel(int x, int y){
    
    float _sum = 0;
    ofColor _color = camPixel.getColor(x, y);
    
    float _r = _color.r;
    float _g = _color.g;
    float _b = _color.b;
    
    _sum = 1.0 - (_r + _g + _b) / 255.0 / 3.0;

    return _sum;
    
}


//--------------------------------------------------------------
float ofApp::getAmp(float x, float y){
    
    float _amp = 0;
    _amp = getPixel(x, y);
    
    if (_amp<threshold) {
        _amp = 0;
    }
    
    return _amp;
    
}


//--------------------------------------------------------------
float ofApp::getFreq(float y){
    
    float freq=0;
    float _maxHz = maxHertz;
    float _minHz = minHertz;
    float yToFreq = ( y / BIT ) * _maxHz;
    
//    freq = 1 - ( log(yToFreq) - log(_minHz) ) / ( log(_maxHz) - log(_minHz) );
    freq = 1 - (yToFreq-_minHz) / (_maxHz-_minHz);

    freq *= _maxHz;
    
    return freq;
    
}



//--------------------------------------------------------------
void ofApp::audioRequested (float * output, int bufferSize, int nChannels){
    
    if (bPlaying) {
        
        for (int i = 0; i < bufferSize; i+=2){
            wave = 0.0;
            
            for(int n=0; n<BIT; n++){
                if (amp[n]>0.00001) {
                    phases[n] += 512./ (float)SAMPLE_RATE * hertzScale[n];
                    if ( phases[n] >= 511 ) phases[n] -= 512;
                    if ( phases[n] < 0 ) phases[n] = 0;
                    
//                    remainder = phases[n] - floor(phases[n]);
//                    wave+=(float) ((1-remainder) * sineBuffer[1+ (long) phases[n]] + remainder * sineBuffer[2+(long) phases[n]])*amp[n];
                    
                    wave += ( sineBuffer[ 1 + (long)phases[n]] ) * amp[n];
                }
            }
            
            wave /= 20.0;
            if (wave>1.0) wave = 1.0;
            if (wave<-1.0) wave = -1.0;
            
            float _volume = 0.85;
            output[ i * nChannels     ] = wave * _volume;
            output[ i * nChannels + 1 ] = wave * _volume;
        }
        
    } else {
        for (int i = 0; i < bufferSize; i++){
            output[ i * nChannels     ] = 0;
            output[ i * nChannels + 1 ] = 0;
        }
    }
    
    
}


//--------------------------------------------------------------
void ofApp::touchDown(ofTouchEventArgs & touch){
    

}

//--------------------------------------------------------------
void ofApp::touchMoved(ofTouchEventArgs & touch){
    
    threshold = ofMap(touch.y, 0, ofGetHeight(), 1, 0);
    
}

//--------------------------------------------------------------
void ofApp::touchUp(ofTouchEventArgs & touch){
    
    cout << touch.id << endl;
    
    if (touch.id==0) bPlaying = !bPlaying;
    
//    if (bPlaying)  {
//        ofSoundStreamStart();
//    } else {
//        ofSoundStreamStop();
//    }

}

//--------------------------------------------------------------
void ofApp::touchDoubleTap(ofTouchEventArgs & touch){
    
}


//--------------------------------------------------------------
void ofApp::touchCancelled(ofTouchEventArgs & touch){
    
}

//--------------------------------------------------------------
void ofApp::lostFocus(){
    
}

//--------------------------------------------------------------
void ofApp::gotFocus(){
    
}

//--------------------------------------------------------------
void ofApp::gotMemoryWarning(){
    
}

//--------------------------------------------------------------
void ofApp::deviceOrientationChanged(int newOrientation){
    
}
